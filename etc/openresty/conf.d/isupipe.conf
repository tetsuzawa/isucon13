# varnishを使う場合、複数台構成はvarnishで行う。
upstream varnish {
    server 127.0.0.1:6081;
    keepalive 60; # varnish server へ keepalive する connection の数。
}

server {
  listen 80 default_server;
  server_name _;
  index index.html index.htm index.nginx-debian.html;
  root /var/www/html;
  location / {
    try_files $uri $uri/ =404;
  }
}


server {
  listen 443 ssl default_server;
  server_name _;
  index index.html index.htm index.nginx-debian.html;
  root /var/www/html;

  # bot避けのためのvhostで、この証明書は有効期限がきれています
  ssl_certificate     /etc/nginx/tls/_.t.isucon.dev.crt;
  ssl_certificate_key /etc/nginx/tls/_.t.isucon.dev.key;
  ssl_protocols TLSv1.3;
  ssl_prefer_server_ciphers off;

  # SSL Sesssion Cache
  ssl_session_cache shared:SSL:10m; # 10MB. セッション情報をキャッシュし、SSL/TLSハンドシェイクをスキップすることでCPU使用率を減らせる。
  ssl_session_timeout 1m;  # cacheする時間。1mは1分。

  location / {
    try_files $uri $uri/ =404;
  }
}

server {
  listen 443 ssl http2 reuseport;
  server_name u.isucon.dev;
  server_name *.u.isucon.dev;

  ssl_certificate     /etc/nginx/tls/_.u.isucon.dev.crt;
  ssl_certificate_key /etc/nginx/tls/_.u.isucon.dev.key;

  ssl_protocols TLSv1.3;
  ssl_prefer_server_ciphers off;

  client_max_body_size 10m;
  root /home/isucon/webapp/public/;
  location / {
    try_files $uri /index.html;
  }

  location ~ /api/user/([a-zA-Z0-9-_]+)/icon {
    root /;
    access_by_lua_block {
         ngx.log(ngx.ERR, "画像にアクセスお試し: ", "/home/isucon/webapp/public/img/$1.jpeg: ", ngx.var.url)
    }

    add_header Cache-Control "max-age=60, must-revalidate";
    try_files /home/isucon/webapp/public/img/$1.jpeg @backend;
  }

  location @backend {
    access_by_lua_block {
         ngx.log(ngx.ERR, "画像にアクセスしたけどファイルが無かったよ: ", ngx.var.request_uri)
    }
    proxy_set_header Host $host;
    proxy_pass   http://192.168.0.11:8080;

    proxy_http_version 1.1;          # app server との connection を keepalive するなら追加
    proxy_set_header Connection "";  # app server との connection を keepalive するなら追加
  }

  # [a-zA-Z0-9-_]+

  # location /api/livestream/[a-zA-Z0-9-_]+/livecomment {
  #   proxy_set_header Host $host;
  #   proxy_pass   http://varnish;

  #   proxy_http_version 1.1;          # app server との connection を keepalive するなら追加
  #   proxy_set_header Connection "";  # app server との connection を keepalive するなら追加

  # }

  location =  /api/regeister {
    proxy_set_header Host $host;
    proxy_pass   http://192.168.0.11:8080;

    proxy_http_version 1.1;          # app server との connection を keepalive するなら追加
    proxy_set_header Connection "";  # app server との connection を keepalive するなら追加
  }

  location /api {
    proxy_set_header Host $host;
    proxy_pass   http://varnish;

    proxy_http_version 1.1;          # app server との connection を keepalive するなら追加
    proxy_set_header Connection "";  # app server との connection を keepalive するなら追加
  }
}
